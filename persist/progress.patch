diff --git a/chat_exporter/chat_exporter.py b/chat_exporter/chat_exporter.py
index 2b406a7..9faa652 100644
--- a/chat_exporter/chat_exporter.py
+++ b/chat_exporter/chat_exporter.py
@@ -52,6 +52,7 @@ async def quick_export(
 
 async def export(
     channel: discord.TextChannel,
+    total: int,
     limit: Optional[int] = None,
     tz_info="UTC",
     guild: Optional[discord.Guild] = None,
@@ -82,6 +83,7 @@ async def export(
     return (
         await Transcript(
             channel=channel,
+            total=total,
             limit=limit,
             messages=None,
             pytz_timezone=tz_info,
diff --git a/chat_exporter/construct/message.py b/chat_exporter/construct/message.py
index 9a42e76..c09381c 100644
--- a/chat_exporter/construct/message.py
+++ b/chat_exporter/construct/message.py
@@ -1,4 +1,5 @@
 import html
+from tqdm import tqdm
 from typing import List, Optional, Union
 
 from pytz import timezone
@@ -451,18 +452,20 @@ async def gather_messages(
         messages[0] = message
         messages[0].reference = None
 
-    for message in messages:
-        content_html, meta_data = await MessageConstruct(
-            message,
-            previous_message,
-            pytz_timezone,
-            military_time,
-            guild,
-            meta_data,
-            message_dict,
-        ).construct_message()
-        message_html += content_html
-        previous_message = message
+    with tqdm(total=len(messages),desc="Transcribing messages") as pbar:
+        for message in messages:
+            content_html, meta_data = await MessageConstruct(
+                message,
+                previous_message,
+                pytz_timezone,
+                military_time,
+                guild,
+                meta_data,
+                message_dict,
+            ).construct_message()
+            message_html += content_html
+            previous_message = message
+            pbar.update(1)
 
     message_html += "</div>"
     return message_html, meta_data
diff --git a/chat_exporter/construct/transcript.py b/chat_exporter/construct/transcript.py
index cab6ebf..0339456 100644
--- a/chat_exporter/construct/transcript.py
+++ b/chat_exporter/construct/transcript.py
@@ -1,4 +1,5 @@
 import datetime
+from tqdm import tqdm
 import html
 import traceback
 
@@ -26,6 +27,7 @@ class TranscriptDAO:
     def __init__(
         self,
         channel: discord.TextChannel,
+        total: int,
         limit: Optional[int],
         messages: Optional[List[discord.Message]],
         pytz_timezone,
@@ -37,6 +39,7 @@ class TranscriptDAO:
         bot: Optional[discord.Client],
     ):
         self.channel = channel
+        self.total = total
         self.messages = messages
         self.limit = int(limit) if limit else None
         self.military_time = military_time
@@ -158,11 +161,15 @@ class TranscriptDAO:
 class Transcript(TranscriptDAO):
     async def export(self):
         if not self.messages:
-            self.messages = [message async for message in self.channel.history(
-                limit=self.limit,
-                before=self.before,
-                after=self.after,
-            )]
+            self.messages = []
+            with tqdm(total=self.total,desc="Enumerating packages") as pbar:
+                async for message in self.channel.history(
+                    limit=self.limit,
+                    before=self.before,
+                    after=self.after,
+                    ):
+                    self.messages.append(message)
+                    pbar.update(1)
 
         if not self.after:
             self.messages.reverse()
diff --git a/chat_exporter/parse/markdown.py b/chat_exporter/parse/markdown.py
index bb327f5..dcacf64 100644
--- a/chat_exporter/parse/markdown.py
+++ b/chat_exporter/parse/markdown.py
@@ -363,12 +363,14 @@ class ParseMarkdown:
         output = []
         if "http://" in content or "https://" in content and "](" not in content:
             for word in content.replace("<br>", " <br>").split():
+                word = word.encode('unicode_string').decode()
+                word = word.encode('unicode_string').decode()
 
                 if "http" not in word:
                     output.append(word)
                     continue
 
-                if "&lt;" in word and "&gt;" in word:
+                if "&lt;http" in word and "&gt;" in word:
                     pattern = r"&lt;https?:\/\/(.*)&gt;"
                     match_url = re.search(pattern, word).group(1)
                     url = f'<a href="https://{match_url}">https://{match_url}</a>'
